import telebot
import re
import threading
import requests
import time
import random
import json
import os

from bs4 import BeautifulSoup
from urllib.parse import urljoin
from docx import Document
from io import BytesIO
from datetime import datetime, timedelta
from telebot import types



TOKEN = '6389584311:AAEOqZhGrLhHuKz03D4z3gW_ZQAObS6sOsA'
bot = telebot.TeleBot(TOKEN)





def fetch_latest_docx_url(base_url="https://www.uksivt.ru/zameny"):
    response = requests.get(base_url)
    response.raise_for_status()

    soup = BeautifulSoup(response.content, 'html.parser')

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º "ui-datepicker-calendar"
    calendar_block = soup.find(class_="ui-datepicker-calendar")
    if not calendar_block:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º 'ui-datepicker-calendar'.")

    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ DOCX-—Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
    docx_links = [link['href'] for link in calendar_block.select('a[href$=".docx"]')]

    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
    docx_links = [urljoin(base_url, link) for link in docx_links]

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É
    latest_link = docx_links[-1] if docx_links else None
    if not latest_link:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ DOCX-—Ñ–∞–π–ª –≤ –±–ª–æ–∫–µ 'ui-datepicker-calendar'.")

    return latest_link

#print(fetch_latest_docx_url())
def extract_schedule_from_docx(docx_url):
    # –°–∫–∞—á–∏–≤–∞–µ–º docx-—Ñ–∞–π–ª
    response = requests.get(docx_url)
    response.raise_for_status()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º docx-—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é python-docx
    doc = Document(BytesIO(response.content))

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã 21—É–ö–°–ö
    for table in doc.tables:
        for row in table.rows:
            if "21—É–ö–°–ö" in row.cells[0].text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "21—É–ö–°–ö"
                return ' '.join(cell.text for cell in row.cells)
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 21—É–ö–°–ö-1
schedule = {
    '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö': {
        3: ('–ú–ü–®', '001–≤', '–õ–∏—Ö–∞—Ä–µ–≤'),
        4: ('–ú–ü–®', '001–≤', '–õ–∏—Ö–∞—Ä–µ–≤'),
        5: ('–ú–ü–®', '001–≤', '–õ–∏—Ö–∞—Ä–µ–≤'),
    },
    '–í–¢–û–†–ù–ò–ö': {
        2: ('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '322', '–ê—Ö–º–µ—Ç–æ–≤–∞'),
        3: ('–ú–î–ö', '001–≤', '–®–∞—Ä–∏–ø–æ–≤'),
        4: ('–ú–î–ö', '001–≤', '–®–∞—Ä–∏–ø–æ–≤'),
        5: ('–§–∏–∑—Ä–∞', None, '–ë–∞—Ä–∞–Ω–æ–≤ –ê–í'),
    },
    '–°–†–ï–î–ê': {
        0: ('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '3', '–•–∞—Å–∏–ø–æ–≤ –†. –≠—Ö'),
        1: ('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '3', '–•–∞—Å–∏–ø–æ–≤ –†. –≠—Ö'),
    },
    '–ß–ï–¢–í–ï–†–ì': {
        1: ('–ú–ü–®', '001–≤', '–õ–∏—Ö–∞—Ä–µ–≤'),
        2: ('–ú–ü–®', '001–≤', '–õ–∏—Ö–∞—Ä–µ–≤'),
        3: ('–ú–ü–®', '001–≤', '–õ–∏—Ö–∞—Ä–µ–≤'),
    },
    '–ü–Ø–¢–ù–ò–¶–ê': {
        0: ('–ú–î–ö', '001–≤', '–®–∞—Ä–∏–ø–æ–≤ –ù–¢'),
        1: ('–ú–î–ö', '001–≤', '–®–∞—Ä–∏–ø–æ–≤ –ù–¢'),
        2: ('–ú–î–ö', '001–≤', '–®–∞—Ä–∏–ø–æ–≤ –ù–¢'),
    },
    '–°–£–ë–ë–û–¢–ê': {
        4: ('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '3', '–•–∞—Å–∏–ø–æ–≤ –†. –≠—Ö'),
        5: ('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '3', '–•–∞—Å–∏–ø–æ–≤ –†. –≠—Ö'),
        6: ('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '3', '–•–∞—Å–∏–ø–æ–≤ –†. –≠—Ö'),
    }
}


bell_schedule = {
    'default': [
        ("07:50", "09:20"),
        ("09:30", "11:05"),
        ("11:15", "12:50"),
        ("13:35", "15:10"),
        ("15:20", "16:50"),
        ("17:00", "18:20"),
        ("18:30", "19:50")
    ],
    'wednesday': [
        ("07:50", "09:20"),
        ("09:30", "11:05"),
        ("11:15", "12:50"),
        ("13:35", "15:10"),
        ("16:10", "17:30"),
        ("17:40", "18:50"),
        ("19:00", "20:10")
    ],
    'saturday': [
        ("08:00", "09:20"),
        ("09:30", "10:50"),
        ("11:00", "12:20"),
        ("12:30", "13:50"),
        ("14:00", "15:20"),
        ("15:30", "16:50"),
        ("17:00", "18:20")
    ]
}

days_mapping = {
    'MONDAY': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö',
    'TUESDAY': '–í–¢–û–†–ù–ò–ö',
    'WEDNESDAY': '–°–†–ï–î–ê',
    'THURSDAY': '–ß–ï–¢–í–ï–†–ì',
    'FRIDAY': '–ü–Ø–¢–ù–ò–¶–ê',
    'SATURDAY': '–°–£–ë–ë–û–¢–ê',
    'SUNDAY': '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'
}
commands = [
    ("/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
    ("/–Ω–µ–¥–µ–ª—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"),
    ("/–ø–∞—Ä–∞", "–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞"),
    ("/–∑–∞–º–µ–Ω—ã", "–ó–∞–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
    ("/–Ω–∞–¥–æ–ª–∏–Ω–∞–ø–∞—Ä—É", "–ù–∞–¥–æ –ª–∏ –Ω–∞ –ø–∞—Ä—É?"),
    ("/–∑–∞–≤—Ç—Ä–∞", "–ü–∞—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
    ("/–∑–≤–æ–Ω–∫–∏", "–ó–≤–æ–Ω–∫–∏ –Ω–∞ –ø–∞—Ä—É")
]
reminders = {}
all_users = set()


def remind_user(chat_id, text):
    bot.send_message(chat_id, text)

@bot.message_handler(commands=['–∑–∞–º–µ–Ω—ã'])
def fetch_replacements(message):
    try:
        docx_url = fetch_latest_docx_url()
        schedule_info = extract_schedule_from_docx(docx_url)
        if schedule_info:
            full_message = schedule_info
        else:
            full_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø—ã 21—É–ö–°–ö-1 –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º docx-—Ñ–∞–π–ª–µ."

        full_message += f"\n\nüìÑ [–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–º–µ–Ω–∞–º–∏]({docx_url})"
        bot.reply_to(message, full_message, parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")




def get_next_day(today):
    days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
    today_index = days.index(today)
    next_day_index = (today_index + 1) % 7
    return days[next_day_index]

@bot.message_handler(commands=['–∑–∞–≤—Ç—Ä–∞', 'tomorrow'])
def tomorrow_schedule(message):
    today = datetime.today()
    tomorrow_date = today + timedelta(days=1)
    formatted_date = tomorrow_date.strftime('%d.%m.%Y')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –≤–∏–¥–µ "–î–î.–ú–ú.–ì–ì–ì–ì"

    day_name = days_mapping[tomorrow_date.strftime('%A').upper()]
    lessons = schedule.get(day_name, {})

    if not lessons:
        bot.reply_to(message, f"–ó–∞–≤—Ç—Ä–∞ ({formatted_date}) –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
        return

    response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date} (–∑–∞–≤—Ç—Ä–∞):\n"
    response += "\n".join([format_lesson(i, lesson, day_name) for i, lesson in lessons.items()])
    bot.reply_to(message, response)



@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = """
*–Ø –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 21—É–ö–°–ö-1*. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

- *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
- *–ù–µ–¥–µ–ª—è*: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
- *–ü–∞—Ä–∞*: –£–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è —Å–µ–π—á–∞—Å –∏–¥–µ—Ç –ø–∞—Ä–∞.
- *–ù–∞–ø–æ–º–Ω–∏—Ç—å*: –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
-  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é /–Ω–∞–ø–æ–º–Ω–∏—Ç—å 13:37 –∂–æ–ø–∞
- *–ó–∞–º–µ–Ω—ã*: –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ–Ω–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
- *–ù–∞–¥–æ –ª–∏ –Ω–∞ –ø–∞—Ä—É?*: –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≥–æ–≤–æ—Ä–∏—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏–¥—Ç–∏ –Ω–∞ –ø–∞—Ä—É.
- *–ó–∞–≤—Ç—Ä–∞*: –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –ø–∞—Ä–∞—Ö.
- *–ó–≤–æ–Ω–∫–∏*: –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–∞—Ö –Ω–∞ –ø–∞—Ä—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    markup = types.InlineKeyboardMarkup()
    for cmd, desc in commands:
        markup.add(types.InlineKeyboardButton(text=desc, callback_data=cmd))
    bot.send_message(message.chat.id, help_text, reply_markup=markup, parse_mode="Markdown")

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            today_schedule(call.message)
        elif call.data == "/–Ω–µ–¥–µ–ª—è":
            week_schedule(call.message)
        elif call.data == "/–ø–∞—Ä–∞":
            current_lesson(call.message)
        elif call.data == "/–∑–∞–º–µ–Ω—ã":
            fetch_replacements(call.message)
        elif call.data == "/–Ω–∞–¥–æ–ª–∏–Ω–∞–ø–∞—Ä—É":
            should_i_go_to_class(call.message)
        elif call.data == "/–∑–∞–≤—Ç—Ä–∞":
            tomorrow_schedule(call.message)
        elif call.data == "/–∑–≤–æ–Ω–∫–∏":
            bell_times(call.message)
        else:
            bot.send_message(call.message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {call.data}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
@bot.message_handler(commands=['–∑–≤–æ–Ω–∫–∏'])
def bell_times(message):
    today = days_mapping[datetime.today().strftime('%A').upper()]

    if today in ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']:
        day_key = 'default'
    elif today == '–°–†–ï–î–ê':
        day_key = 'wednesday'
    elif today == '–°–£–ë–ë–û–¢–ê':
        day_key = 'saturday'
    else:
        bot.reply_to(message, "–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ—Ç.")
        return

    response = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for i, (start, end) in enumerate(bell_schedule[day_key]):
        response += f"{i}. {start}-{end}\n"

    bot.reply_to(message, response)


def format_lesson(lesson_num, lesson_info, day):
    if day in ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']:
        day_key = 'default'
    elif day == '–°–†–ï–î–ê':
        day_key = 'wednesday'
    elif day == '–°–£–ë–ë–û–¢–ê':
        day_key = 'saturday'
    else:
        return f"–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å {day}"

    time_range = f"{bell_schedule[day_key][lesson_num][0]}-{bell_schedule[day_key][lesson_num][1]}"
    return f"{time_range} - {lesson_info[0]} - {lesson_info[1]} ({lesson_info[2]})"



@bot.message_handler(commands=['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'schedule'])
def today_schedule(message):
    today = days_mapping[datetime.today().strftime('%A').upper()]
    lessons = schedule.get(today, {})
    if not lessons:
        bot.reply_to(message, "–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç. –¢—ã —á–µ –¥–æ–ª–±–∞–µ–± —ç—Ç–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å?")
        return

    response = "\n".join([format_lesson(i, lesson, today) for i, lesson in lessons.items()])
    bot.reply_to(message, response)

@bot.message_handler(commands=['–Ω–µ–¥–µ–ª—è', 'weekschedule'])
def week_schedule(message):
    response = ""
    for day, lessons in schedule.items():
        response += day + ":\n"
        response += "\n".join([format_lesson(i, lesson, day) for i, lesson in lessons.items()]) + "\n\n"
    bot.reply_to(message, response)

@bot.message_handler(commands=['–ø–∞—Ä–∞', 'lesson'])
def current_lesson(message):
    today = days_mapping[datetime.today().strftime('%A').upper()]
    current_time = datetime.now().time()
    current_lesson = None
    next_lesson = None

    for i, (start, end) in enumerate(bell_schedule.get(today, bell_schedule['default'])):
        start_time = datetime.strptime(start, "%H:%M").time()
        end_time = datetime.strptime(end, "%H:%M").time()
        if start_time <= current_time <= end_time:
            current_lesson = i
        if current_time <= start_time:
            next_lesson = i
            break

    response = ""

    if current_lesson is not None and current_lesson in schedule.get(today, {}):
        lesson = schedule[today][current_lesson]
        time_range = f"{bell_schedule.get(today, bell_schedule['default'])[current_lesson][0]}-{bell_schedule.get(today, bell_schedule['default'])[current_lesson][1]}"
        response += f"–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞ ({time_range}): {lesson[0]} - {lesson[1]} ({lesson[2]})\n"

    if next_lesson is not None and next_lesson in schedule.get(today, {}):
        lesson = schedule[today][next_lesson]
        time_range = f"{bell_schedule.get(today, bell_schedule['default'])[next_lesson][0]}-{bell_schedule.get(today, bell_schedule['default'])[next_lesson][1]}"
        response += f"–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ ({time_range}): {lesson[0]} - {lesson[1]} ({lesson[2]})"

    if not response:
        response = "–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–∞—Ä—ã."

    bot.reply_to(message, response)



@bot.message_handler(commands=['–Ω–∞–¥–æ–ª–∏–Ω–∞–ø–∞—Ä—É'])
def should_i_go_to_class(message):
    responses = ["–î–∞, –Ω–∞–¥–æ", "–ù–µ—Ç, –Ω–µ –Ω–∞–¥–æ"]
    bot.reply_to(message, random.choice(responses))



@bot.message_handler(commands=['–Ω–∞–ø–æ–º–Ω–∏—Ç—å'])
def set_reminder(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    match = re.match(r'/–Ω–∞–ø–æ–º–Ω–∏—Ç—å (\d{1,2}:\d{2})\s+(.+)', message.text)
    if not match:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    reminder_time = match.group(1)
    reminder_text = match.group(2)
    try:
        remind_time = datetime.strptime(reminder_time, "%H:%M")
        current_time = datetime.now()
        delay = (remind_time - current_time).seconds
        if delay < 0:
            bot.reply_to(message, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            return
        threading.Timer(delay, remind_user, args=[message.chat.id, reminder_text]).start()
        reminders[message.chat.id] = (remind_time, reminder_text)
        bot.reply_to(message, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}: {reminder_text}")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


@bot.message_handler(commands=['–Ω–∞–ø–æ–º–Ω–∏—Ç—å–≤—Å–µ–º', 'remindall'])
def remind_all(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    match = re.match(r'/–Ω–∞–ø–æ–º–Ω–∏—Ç—å–≤—Å–µ–º (\d{1,2}:\d{2})\s+(.+)', message.text)
    if not match:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    reminder_time = match.group(1)
    reminder_text = match.group(2)
    try:
        remind_time = datetime.strptime(reminder_time, "%H:%M")
        current_time = datetime.now()
        delay = (remind_time - current_time).seconds
        if delay < 0:
            bot.reply_to(message, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            return
        for user_id in all_users:
            threading.Timer(delay, remind_user, args=[user_id, reminder_text]).start()
        bot.reply_to(message, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}.")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")



# –î–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = ['572388647']  # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_ADMIN_ID' –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CHAT_FILE = "chats.txt"

def save_chat_to_file(chat_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—â–µ –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(CHAT_FILE):
        with open(CHAT_FILE, 'w') as f:
            pass  # –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç

    with open(CHAT_FILE, 'r') as file:
        existing_chats = file.readlines()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π ID —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª–µ
    if str(chat_id) + '\n' not in existing_chats:
        with open(CHAT_FILE, 'a') as file:
            file.write(str(chat_id) + '\n')
        print(f"–ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª.")
    else:
        print(f"–ß–∞—Ç {chat_id} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ.")




def get_all_chats_from_file():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(CHAT_FILE):
        return []

    with open(CHAT_FILE, 'r') as file:
        chats = file.readlines()

    return [int(chat.strip()) for chat in chats]




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['—Ä–∞—Å—Å—ã–ª–∫–∞'])
def send_broadcast(message):
    if str(message.from_user.id) in ADMINS:
        msg_parts = message.text.split(' ', 1)
        if len(msg_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return
        broadcast_msg = msg_parts[1]
        chats = get_all_chats_from_file()

        for chat_id in chats:
            try:
                bot.send_message(chat_id, broadcast_msg)
            except:
                continue
        bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ò–∑–º–µ–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Ç –≤ —Ñ–∞–π–ª
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    save_chat_to_file(message.chat.id)
    # ... [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞]



while True:
    try:
        bot.polling(timeout=25)
    except requests.exceptions.ReadTimeout:
        print("Timeout error occurred. Trying to reconnect...")
        time.sleep(10)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    except Exception as e:
        print(f"Unexpected error occurred: {e}. Trying to reconnect...")
        time.sleep(10)

